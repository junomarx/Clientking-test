/**
 * Test-Script f√ºr Phase 1 - Backend Security Validation
 * Testet Audit-Logging und Permission-Validation Services
 */

import { AuditService } from './server/audit-service';
import { PermissionValidationService } from './server/permission-validation-service';
import { storage } from './server/storage';

async function testPhase1BackendSecurity() {
  console.log("üîí PHASE 1 - BACKEND SECURITY VALIDATION");
  console.log("=========================================");

  try {
    // Test 1: Audit-Log Erstellung
    console.log("\nüìã Test 1: Audit-Log System");
    await AuditService.log(
      77, // Multi-Shop Admin User ID
      "permission_request",
      "success",
      {
        targetUserId: 10,
        targetShopId: 1,
        reason: "Test audit log creation"
      }
    );
    console.log("‚úÖ Audit-Log erfolgreich erstellt");

    // Test 2: Permission Validation
    console.log("\nüîê Test 2: Permission Validation System");
    const validationResult = await PermissionValidationService.validateShopAccess(77, 1);
    console.log("‚úÖ Permission Validation ausgef√ºhrt:", validationResult);

    // Test 3: Rate-Limiting
    console.log("\n‚è±Ô∏è Test 3: Rate-Limiting System");
    const rateLimitResult = await PermissionValidationService.checkRateLimit(77, "permission_request");
    console.log("‚úÖ Rate-Limiting funktional:", rateLimitResult);

    // Test 4: Input Sanitization
    console.log("\nüßπ Test 4: Input Sanitization");
    const sanitizeResult = PermissionValidationService.sanitizePermissionRequest({
      multiShopAdminId: "77",
      shopId: "1",
      shopOwnerId: "10"
    });
    console.log("‚úÖ Input Sanitization funktional:", sanitizeResult);

    // Test 5: Audit-Logs abrufen
    console.log("\nüìã Test 5: Audit-Logs Retrieval");
    const userAuditLogs = await AuditService.getUserAuditLogs(77, 5);
    console.log(`‚úÖ ${userAuditLogs.length} Audit-Logs gefunden f√ºr User 77`);

    console.log("\nüéâ PHASE 1 VALIDATION ERFOLGREICH!");
    console.log("Backend Security System ist funktional:");
    console.log("- ‚úÖ Audit-Logging funktioniert");
    console.log("- ‚úÖ Permission-Validation implementiert");
    console.log("- ‚úÖ Rate-Limiting aktiv");
    console.log("- ‚úÖ Input-Sanitization funktional");

    return true;
  } catch (error) {
    console.error("‚ùå PHASE 1 VALIDATION FEHLER:", error);
    return false;
  }
}

// Test ausf√ºhren
testPhase1BackendSecurity()
  .then(success => {
    if (success) {
      console.log("\nüöÄ BEREIT F√úR PHASE 2: API-Erweiterungen");
    } else {
      console.log("\n‚ö†Ô∏è PHASE 1 muss korrigiert werden vor Phase 2");
    }
    process.exit(0);
  })
  .catch(error => {
    console.error("‚ùå TEST SCRIPT FEHLER:", error);
    process.exit(1);
  });