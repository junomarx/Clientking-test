import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { 
  CheckCircle, 
  XCircle, 
  Printer, 
  ArrowUpRight, 
  RotateCw,
  FileText,
  ShieldAlert,
  Trash2,
  Edit,
  AlertCircle,
  Loader2
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { formatDistanceToNow, format } from "date-fns";
import { de } from "date-fns/locale";
import { CostEstimatePrintButtons } from "./CostEstimateImprovedPrint";

interface CostEstimateDetailsDialogProps {
  open: boolean;
  onClose: () => void;
  estimateId: number | null;
}

// Interface für einen Kostenvoranschlag
interface CostEstimate {
  id: number;
  reference_number: string;
  customer_id?: number;
  customerId?: number; // In der Detailansicht wird camelCase verwendet
  deviceType: string;
  brand: string;
  model: string;
  issue: string;
  notes?: string;
  serial_number?: string;
  status: string;
  created_at: string;
  total: string;
  subtotal: string;
  tax_amount: string;
  tax_rate: number;
  firstname?: string;
  lastname?: string;
  phone?: string;
  email?: string;
  convertedToRepair?: boolean;
  validUntil?: string;
}

// Interface für Position
interface CostEstimateItem {
  description: string;
  quantity: number;
  unitPrice: string;
  totalPrice: string;
}

export default function CostEstimateDetailsDialog({ open, onClose, estimateId }: CostEstimateDetailsDialogProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState("übersicht");
  const [items, setItems] = useState<CostEstimateItem[]>([]);
  const [isEditing, setIsEditing] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  
  // Aktiver Kostenvoranschlag
  const { data: estimate, isLoading, isError, error } = useQuery({
    queryKey: ['/api/cost-estimates', estimateId],
    queryFn: async () => {
      if (!estimateId) return null;
      const res = await apiRequest("GET", `/api/cost-estimates/${estimateId}`);
      return await res.json();
    },
    enabled: Boolean(estimateId) && open,
  });
  
  // Kunde zum Kostenvoranschlag laden, falls verfügbar
  const { data: customer } = useQuery({
    queryKey: ['/api/customers', estimate?.customerId || estimate?.customer_id],
    queryFn: async () => {
      const customerId = estimate?.customerId || estimate?.customer_id;
      if (!customerId) return null;
      const res = await apiRequest("GET", `/api/customers/${customerId}`);
      return await res.json();
    },
    enabled: Boolean(estimate?.customerId || estimate?.customer_id),
  });
  
  // Status-Änderung Mutation
  const updateStatusMutation = useMutation({
    mutationFn: async ({ id, status }: { id: number, status: string }) => {
      const res = await apiRequest("PATCH", `/api/cost-estimates/${id}/status`, { status });
      return await res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/cost-estimates'] });
      queryClient.invalidateQueries({ queryKey: ['/api/cost-estimates', estimateId] });
      toast({
        title: "Status aktualisiert",
        description: "Der Status des Kostenvoranschlags wurde erfolgreich aktualisiert.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Fehler",
        description: `Status konnte nicht aktualisiert werden: ${error.message}`,
        variant: "destructive",
      });
    },
  });
  
  // In Reparatur umwandeln Mutation
  const convertToRepairMutation = useMutation({
    mutationFn: async (id: number) => {
      const res = await apiRequest("POST", `/api/cost-estimates/${id}/convert-to-repair`);
      return await res.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/cost-estimates'] });
      queryClient.invalidateQueries({ queryKey: ['/api/cost-estimates', estimateId] });
      
      toast({
        title: "Konvertierung erfolgreich",
        description: "Der Kostenvoranschlag wurde erfolgreich in einen Reparaturauftrag umgewandelt.",
      });
      
      // Nach kurzer Verzögerung den Dialog schließen
      setTimeout(() => {
        onClose();
        
        // Zur Reparaturansicht navigieren
        if (data.repairId) {
          window.location.href = `/repairs/${data.repairId}`;
        }
      }, 1500);
    },
    onError: (error: Error) => {
      toast({
        title: "Fehler",
        description: `Konvertierung fehlgeschlagen: ${error.message}`,
        variant: "destructive",
      });
    },
  });
  
  // Löschen Mutation
  const deleteMutation = useMutation({
    mutationFn: async (id: number) => {
      const res = await apiRequest("DELETE", `/api/cost-estimates/${id}`);
      if (!res.ok) {
        const errText = await res.text();
        throw new Error(errText);
      }
      return true;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/cost-estimates'] });
      toast({
        title: "Kostenvoranschlag gelöscht",
        description: "Der Kostenvoranschlag wurde erfolgreich gelöscht.",
      });
      onClose();
    },
    onError: (error: Error) => {
      toast({
        title: "Löschen fehlgeschlagen",
        description: `Der Kostenvoranschlag konnte nicht gelöscht werden: ${error.message}`,
        variant: "destructive",
      });
      setShowDeleteConfirm(false);
    },
  });
  
  // Positionen laden
  useEffect(() => {
    if (estimate && estimate.positions) {
      try {
        // Wenn Positionen als JSON-String gespeichert sind
        if (typeof estimate.positions === 'string') {
          const parsedItems = JSON.parse(estimate.positions);
          setItems(parsedItems);
        } else {
          // Wenn Positionen bereits als Array vorliegen
          setItems(estimate.positions);
        }
      } catch (e) {
        console.error("Fehler beim Parsen der Positionen:", e);
        setItems([]);
      }
    } else {
      setItems([]);
    }
  }, [estimate]);
  
  const handleAccept = () => {
    if (!estimate) return;
    updateStatusMutation.mutate({ id: estimate.id, status: 'angenommen' });
  };
  
  const handleReject = () => {
    if (!estimate) return;
    updateStatusMutation.mutate({ id: estimate.id, status: 'abgelehnt' });
  };
  
  const handleConvertToRepair = () => {
    if (!estimate) return;
    convertToRepairMutation.mutate(estimate.id);
  };
  
  const handleEdit = () => {
    if (!estimate) return;
    window.location.href = `/cost-estimates/edit/${estimate.id}`;
  };
  
  const handleDelete = () => {
    setShowDeleteConfirm(true);
  };
  
  const confirmDelete = () => {
    if (!estimate) return;
    deleteMutation.mutate(estimate.id);
  };
  
  // Benutzerfreundliche Status-Anzeige
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'offen':
        return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">Offen</Badge>;
      case 'angenommen':
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Angenommen</Badge>;
      case 'abgelehnt':
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200">Abgelehnt</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };
  
  // Benutzerfreundliches Datumsformat
  const formatDate = (date: string) => {
    try {
      return format(new Date(date), 'dd.MM.yyyy HH:mm', { locale: de });
    } catch (error) {
      return 'Ungültiges Datum';
    }
  };
  
  // Wenn Dialog geschlossen, dann nichts anzeigen
  if (!open) return null;
  
  // Zeige Ladeindikator während der Datenabfrage
  if (isLoading) {
    return (
      <Dialog open={open} onOpenChange={onClose}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Kostenvoranschlag wird geladen</DialogTitle>
          </DialogHeader>
          <div className="flex justify-center p-12">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        </DialogContent>
      </Dialog>
    );
  }
  
  // Zeige Fehlermeldung
  if (isError || !estimate) {
    return (
      <Dialog open={open} onOpenChange={onClose}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Fehler beim Laden</DialogTitle>
            <DialogDescription className="text-red-500">
              {error instanceof Error ? error.message : "Kostenvoranschlag konnte nicht geladen werden."}
            </DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>
    );
  }
  
  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <div>
              <DialogTitle className="text-xl font-bold">
                Kostenvoranschlag {estimate.reference_number}
              </DialogTitle>
              <DialogDescription>
                Erstellt am {formatDate(estimate.created_at)}
              </DialogDescription>
            </div>
            <div className="flex items-center space-x-2">
              {getStatusBadge(estimate.status)}
              {estimate.convertedToRepair && (
                <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                  In Reparatur umgewandelt
                </Badge>
              )}
            </div>
          </div>
        </DialogHeader>
        
        <Tabs defaultValue="übersicht" value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="w-full border-b">
            <TabsTrigger value="übersicht">Übersicht</TabsTrigger>
            <TabsTrigger value="finanziell">Finanzielles</TabsTrigger>
            <TabsTrigger value="kunde">Kundendaten</TabsTrigger>
          </TabsList>
          
          <TabsContent value="übersicht" className="space-y-4 pt-4">
            <div className="grid md:grid-cols-2 gap-4">
              <Card>
                <CardHeader>
                  <CardTitle>Geräteinformationen</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="grid grid-cols-2">
                      <div className="font-medium">Gerätetyp</div>
                      <div>{estimate.deviceType}</div>
                    </div>
                    <div className="grid grid-cols-2">
                      <div className="font-medium">Hersteller</div>
                      <div>{estimate.brand}</div>
                    </div>
                    <div className="grid grid-cols-2">
                      <div className="font-medium">Modell</div>
                      <div>{estimate.model}</div>
                    </div>
                    {estimate.serial_number && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">Seriennummer</div>
                        <div>{estimate.serial_number}</div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Beschreibung</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <h4 className="text-sm font-medium text-muted-foreground mb-1">Problem/Auftrag</h4>
                      <p className="whitespace-pre-line">{estimate.issue}</p>
                    </div>
                    
                    {estimate.notes && (
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-1">Anmerkungen</h4>
                        <p className="whitespace-pre-line">{estimate.notes}</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
              
              <Card className="md:col-span-2">
                <CardHeader>
                  <CardTitle className="text-lg">Aktionen</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap items-center gap-2">
                    {estimate.status === 'offen' && (
                      <>
                        <Button 
                          onClick={handleAccept}
                          disabled={updateStatusMutation.isPending}
                          className="bg-green-600 hover:bg-green-700"
                        >
                          <CheckCircle className="h-4 w-4 mr-2" />
                          Annehmen
                        </Button>
                        <Button 
                          onClick={handleReject}
                          disabled={updateStatusMutation.isPending}
                          variant="destructive"
                        >
                          <XCircle className="h-4 w-4 mr-2" />
                          Ablehnen
                        </Button>
                      </>
                    )}
                    
                    {estimate.status === 'angenommen' && !estimate.convertedToRepair && (
                      <Button 
                        onClick={handleConvertToRepair}
                        disabled={convertToRepairMutation.isPending}
                        className="bg-blue-600 hover:bg-blue-700"
                      >
                        <RotateCw className="h-4 w-4 mr-2" />
                        In Reparatur umwandeln
                      </Button>
                    )}
                    
                    {/* Druck- und Export-Optionen mit der verbesserten Komponente */}
                    <CostEstimatePrintButtons 
                      estimate={estimate}
                      items={items}
                      customer={customer}
                    />
                    
                    <Button 
                      variant="outline"
                      onClick={handleEdit}
                    >
                      <Edit className="h-4 w-4 mr-2" />
                      Bearbeiten
                    </Button>
                    
                    <Button 
                      variant="outline"
                      onClick={handleDelete}
                      className="ml-auto text-red-500 hover:text-red-700 hover:bg-red-50"
                    >
                      <Trash2 className="h-4 w-4 mr-2" />
                      Löschen
                    </Button>
                    
                    {showDeleteConfirm && (
                      <div className="fixed inset-0 bg-black/40 z-50 flex items-center justify-center">
                        <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
                          <h3 className="text-lg font-bold mb-2">Kostenvoranschlag löschen?</h3>
                          <p className="mb-4">
                            Möchten Sie den Kostenvoranschlag {estimate.reference_number} wirklich löschen? Diese Aktion kann nicht rückgängig gemacht werden.
                          </p>
                          <div className="flex justify-end space-x-2">
                            <Button variant="outline" onClick={() => setShowDeleteConfirm(false)}>
                              Abbrechen
                            </Button>
                            <Button 
                              variant="destructive" 
                              onClick={confirmDelete}
                              disabled={deleteMutation.isPending}
                            >
                              {deleteMutation.isPending ? (
                                <>
                                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                  Löschen...
                                </>
                              ) : (
                                <>
                                  <Trash2 className="h-4 w-4 mr-2" />
                                  Löschen
                                </>
                              )}
                            </Button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
          
          <TabsContent value="finanziell" className="space-y-4 pt-4">
            <Card>
              <CardHeader>
                <CardTitle>Positionen</CardTitle>
              </CardHeader>
              <CardContent>
                {items.length > 0 ? (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Beschreibung</TableHead>
                        <TableHead className="text-right">Menge</TableHead>
                        <TableHead className="text-right">Einzelpreis</TableHead>
                        <TableHead className="text-right">Gesamtpreis</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {items.map((item, index) => (
                        <TableRow key={index}>
                          <TableCell>{item.description}</TableCell>
                          <TableCell className="text-right">{item.quantity}</TableCell>
                          <TableCell className="text-right">{item.unitPrice} €</TableCell>
                          <TableCell className="text-right">{item.totalPrice} €</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                ) : (
                  <div className="text-center py-4 text-muted-foreground">
                    Keine Positionen vorhanden
                  </div>
                )}
                
                <div className="mt-4 border-t pt-4">
                  <div className="flex justify-between">
                    <span className="font-medium">Zwischensumme:</span>
                    <span>{estimate.subtotal} €</span>
                  </div>
                  <div className="flex justify-between mt-1">
                    <span className="font-medium">MwSt ({estimate.tax_rate}%):</span>
                    <span>{estimate.tax_amount} €</span>
                  </div>
                  <div className="flex justify-between mt-3 border-t pt-2 font-bold">
                    <span>Gesamtbetrag:</span>
                    <span>{estimate.total} €</span>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Zahlungsinformationen</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="text-sm font-medium text-muted-foreground mb-1">Gültigkeit</h4>
                    <p>{estimate.validUntil ? formatDate(estimate.validUntil) : 'Unbegrenzt'}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="kunde" className="space-y-4 pt-4">
            <Card>
              <CardHeader>
                <CardTitle>Kundendaten</CardTitle>
              </CardHeader>
              <CardContent>
                {customer ? (
                  <div className="space-y-2">
                    <div className="grid grid-cols-2">
                      <div className="font-medium">Name</div>
                      <div>{customer.firstName} {customer.lastName}</div>
                    </div>
                    {customer.company && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">Firma</div>
                        <div>{customer.company}</div>
                      </div>
                    )}
                    {customer.streetAddress && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">Straße</div>
                        <div>{customer.streetAddress}</div>
                      </div>
                    )}
                    {(customer.zipCode || customer.city) && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">PLZ/Ort</div>
                        <div>{customer.zipCode} {customer.city}</div>
                      </div>
                    )}
                    {customer.phone && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">Telefon</div>
                        <div>{customer.phone}</div>
                      </div>
                    )}
                    {customer.email && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">E-Mail</div>
                        <div>{customer.email}</div>
                      </div>
                    )}
                    
                    <div className="mt-4 pt-2 border-t">
                      <Button 
                        variant="outline" 
                        className="mt-2"
                        onClick={() => window.open(`/customers/${customer.id}`, '_blank')}
                      >
                        <ArrowUpRight className="h-4 w-4 mr-2" />
                        Kundendetails öffnen
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {(estimate.firstname || estimate.lastname) && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">Name</div>
                        <div>{estimate.firstname} {estimate.lastname}</div>
                      </div>
                    )}
                    {estimate.phone && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">Telefon</div>
                        <div>{estimate.phone}</div>
                      </div>
                    )}
                    {estimate.email && (
                      <div className="grid grid-cols-2">
                        <div className="font-medium">E-Mail</div>
                        <div>{estimate.email}</div>
                      </div>
                    )}
                    
                    {!estimate.firstname && !estimate.lastname && !estimate.phone && !estimate.email && (
                      <div className="text-center py-4 text-muted-foreground flex flex-col items-center">
                        <ShieldAlert className="h-10 w-10 mb-2 text-amber-500" />
                        <span>Keine Kundendaten verfügbar</span>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
}