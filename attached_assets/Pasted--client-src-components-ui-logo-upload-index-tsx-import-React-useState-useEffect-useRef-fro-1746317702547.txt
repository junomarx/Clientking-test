// client/src/components/ui/logo-upload/index.tsx

import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Upload, Image as ImageIcon, X } from 'lucide-react';

export function LogoUpload() {
  const [logoUrl, setLogoUrl] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  // Logo beim ersten Rendern laden
  useEffect(() => {
    const fetchLogo = async () => {
      try {
        const response = await fetch('/api/business-settings/logo');
        const data = await response.json();
        if (data.success && data.logoUrl) {
          setLogoUrl(data.logoUrl);
        }
      } catch (err) {
        console.error('Logo konnte nicht geladen werden:', err);
      }
    };
    fetchLogo();
  }, []);

  const handleUploadClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      toast({ title: 'Ungültiges Dateiformat', description: 'Nur Bilder erlaubt.', variant: 'destructive' });
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      toast({ title: 'Datei zu groß', description: 'Max. 5MB erlaubt.', variant: 'destructive' });
      return;
    }

    const formData = new FormData();
    formData.append('logo', file);
    setIsUploading(true);

    try {
      const response = await fetch('/api/business-settings/logo', {
        method: 'POST',
        body: formData,
      });
      const data = await response.json();

      if (data.success) {
        setLogoUrl(data.logoUrl);
        toast({ title: 'Erfolgreich', description: 'Logo wurde hochgeladen.' });
      } else {
        throw new Error(data.message || 'Unbekannter Fehler');
      }
    } catch (error) {
      toast({ title: 'Fehler beim Hochladen', description: error.message, variant: 'destructive' });
    } finally {
      setIsUploading(false);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const handleDeleteLogo = async () => {
    try {
      const response = await fetch('/api/business-settings/logo', { method: 'DELETE' });
      const data = await response.json();

      if (data.success) {
        setLogoUrl(null);
        toast({ title: 'Logo gelöscht', description: 'Das Logo wurde entfernt.' });
      }
    } catch (error) {
      toast({ title: 'Fehler beim Löschen', description: error.message, variant: 'destructive' });
    }
  };

  const logoUrlWithCache = logoUrl ? `${logoUrl}?t=${Date.now()}` : null;

  return (
    <div className="space-y-4">
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="image/*"
        className="hidden"
      />

      <div className="flex flex-col items-center border rounded-md p-4">
        {logoUrlWithCache ? (
          <div className="relative">
            <img
              src={logoUrlWithCache}
              alt="Firmenlogo"
              className="max-w-[200px] max-h-32 object-contain border rounded p-2"
            />
            <Button
              variant="destructive"
              size="icon"
              className="absolute -top-2 -right-2 h-6 w-6 rounded-full"
              onClick={handleDeleteLogo}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center p-8 border-2 border-dashed rounded-md w-full text-center">
            <ImageIcon className="h-12 w-12 text-muted-foreground mb-2" />
            <p className="text-sm text-muted-foreground mb-4">Kein Logo hochgeladen</p>
          </div>
        )}

        <Button onClick={handleUploadClick} className="mt-4" disabled={isUploading}>
          {isUploading ? (
            <span className="flex items-center">
              <span className="animate-spin mr-2">⟳</span> Wird hochgeladen...
            </span>
          ) : (
            <span className="flex items-center">
              <Upload className="mr-2 h-4 w-4" />
              {logoUrl ? 'Logo ändern' : 'Logo hochladen'}
            </span>
          )}
        </Button>
      </div>

      <div className="text-sm text-muted-foreground">
        <p>Unterstützte Formate: JPEG, PNG, GIF, WEBP</p>
        <p>Maximale Größe: 5MB</p>
      </div>
    </div>
  );
}
